// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YamangTao.Data;

namespace YamangTao.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200526024458_InitialSQLServer")]
    partial class InitialSQLServer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("YamangTao.Model.Auth.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("YamangTao.Model.Auth.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("YamangTao.Model.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("YamangTao.Model.Auth.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("YamangTao.Model.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BrachCampusId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentCampusId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("DateHired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateResigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRetired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTerminated")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeGroup")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("InActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MI")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("Resigned")
                        .HasColumnType("bit");

                    b.Property<bool>("Retired")
                        .HasColumnType("bit");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Terminated")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCampusId");

                    b.HasIndex("OrgUnitId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("YamangTao.Model.OrgStructure.BranchCampus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Campus")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("BranchCampuses");
                });

            modelBuilder.Entity("YamangTao.Model.OrgStructure.OrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CurrentHeadId")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("NameOfHead")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ParentUnitId")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("UnitType")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CurrentHeadId");

                    b.HasIndex("ParentUnitId");

                    b.ToTable("OrgUnits");
                });

            modelBuilder.Entity("YamangTao.Model.PM.Ipcr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdjectivalRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ApproverDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Compiled")
                        .HasColumnType("bit");

                    b.Property<string>("CompiledById")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("CompilerDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastPrinted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReviewed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTargetApproved")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("FinalAverageRating")
                        .HasColumnType("float");

                    b.Property<double>("FinalErating")
                        .HasColumnType("float");

                    b.Property<double>("FinalQrating")
                        .HasColumnType("float");

                    b.Property<double>("FinalTrating")
                        .HasColumnType("float");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<string>("LandDRecommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodTo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("bit");

                    b.Property<string>("ReviewedById")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ReviewerDesignation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RnRRecommendation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isLocked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CompiledById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("ReviewedById");

                    b.ToTable("Ipcrs");
                });

            modelBuilder.Entity("YamangTao.Model.PM.Kpi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActualAccomplishment")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<float>("AverageRating")
                        .HasColumnType("real");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<float>("EfficiencyRating")
                        .HasColumnType("real");

                    b.Property<bool>("HasEfficiency")
                        .HasColumnType("bit");

                    b.Property<bool>("HasQuality")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTimeliness")
                        .HasColumnType("bit");

                    b.Property<int?>("IpcrId")
                        .HasColumnType("int");

                    b.Property<int>("KpiTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("ParentKpiId")
                        .HasColumnType("int");

                    b.Property<float>("QualityRating")
                        .HasColumnType("real");

                    b.Property<string>("SuccessIndicator")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TimelinessRating")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("IpcrId");

                    b.HasIndex("KpiTypeId");

                    b.HasIndex("ParentKpiId");

                    b.ToTable("KPIs");
                });

            modelBuilder.Entity("YamangTao.Model.PM.KpiType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("KpiTypes");
                });

            modelBuilder.Entity("YamangTao.Model.PM.Rating", b =>
                {
                    b.Property<long>("RatingMatrixId")
                        .HasColumnType("bigint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("RatingMatrixId", "Rate");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("YamangTao.Model.PM.RatingMatrix", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Dimension")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("KpiId")
                        .HasColumnType("int");

                    b.Property<string>("MeansOfVerification")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("KpiId");

                    b.ToTable("RatingMatrix");
                });

            modelBuilder.Entity("YamangTao.Model.RSP.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SalaryGrade")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("YamangTao.Model.Auth.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("YamangTao.Model.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("YamangTao.Model.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("YamangTao.Model.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YamangTao.Model.Auth.Photo", b =>
                {
                    b.HasOne("YamangTao.Model.Auth.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("YamangTao.Model.Auth.User", b =>
                {
                    b.HasOne("YamangTao.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("YamangTao.Model.Auth.UserRole", b =>
                {
                    b.HasOne("YamangTao.Model.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YamangTao.Model.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YamangTao.Model.Employee", b =>
                {
                    b.HasOne("YamangTao.Model.OrgStructure.BranchCampus", "CurrentCampus")
                        .WithMany()
                        .HasForeignKey("CurrentCampusId");

                    b.HasOne("YamangTao.Model.OrgStructure.OrgUnit", "CurrentUnit")
                        .WithMany("Employees")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("YamangTao.Model.OrgStructure.OrgUnit", b =>
                {
                    b.HasOne("YamangTao.Model.Employee", "CurrentHead")
                        .WithMany("HeadedUnits")
                        .HasForeignKey("CurrentHeadId");

                    b.HasOne("YamangTao.Model.OrgStructure.OrgUnit", "ParentUnit")
                        .WithMany("OrgUnitChildren")
                        .HasForeignKey("ParentUnitId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("YamangTao.Model.PM.Ipcr", b =>
                {
                    b.HasOne("YamangTao.Model.Employee", "ApprovedBy")
                        .WithMany("ApprovedIpcrs")
                        .HasForeignKey("ApprovedById");

                    b.HasOne("YamangTao.Model.Employee", "CompiledBy")
                        .WithMany("CompiledIpcrs")
                        .HasForeignKey("CompiledById");

                    b.HasOne("YamangTao.Model.Employee", "Ratee")
                        .WithMany("IPCRs")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("YamangTao.Model.RSP.JobPosition", "Position")
                        .WithMany("Ipcrs")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YamangTao.Model.OrgStructure.OrgUnit", "Unit")
                        .WithMany("IpcrsUnderThisUnit")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YamangTao.Model.Employee", "ReviewedBy")
                        .WithMany("ReviewedIpcrs")
                        .HasForeignKey("ReviewedById");
                });

            modelBuilder.Entity("YamangTao.Model.PM.Kpi", b =>
                {
                    b.HasOne("YamangTao.Model.PM.Ipcr", "Ipcr")
                        .WithMany("KPIs")
                        .HasForeignKey("IpcrId");

                    b.HasOne("YamangTao.Model.PM.KpiType", "KpiType")
                        .WithMany("KPIs")
                        .HasForeignKey("KpiTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YamangTao.Model.PM.Kpi", "ParentKpi")
                        .WithMany("Kpis")
                        .HasForeignKey("ParentKpiId");
                });

            modelBuilder.Entity("YamangTao.Model.PM.Rating", b =>
                {
                    b.HasOne("YamangTao.Model.PM.RatingMatrix", "Matrix")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingMatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YamangTao.Model.PM.RatingMatrix", b =>
                {
                    b.HasOne("YamangTao.Model.PM.Kpi", "Kpi")
                        .WithMany("RatingMatrices")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
